//Задание 1:
// Создать глобальную переменную типа int с именем a
int a = 10; //глобальная переменная

void main() {
  // Создать локальную переменную типа double с именем b
  double b = 9.9; //локальная переменная

  // Создать строковую переменную с именем text  при помощи var, попытаться присвоить переменной a. Каков результат?
  var text = "Hello!";
  //text = a; // Ошибка "A value of type 'double' can't be assigned to a variable of type 'String'" Нельзя менять тип переменной, так как используется var

  // Создать переменную  с именем dyn при помощи dynamic,
  // проинициализировать его целочисленным значением,
  // далее попытаться присвоить переменной строковое значение переменной text. Каков результат? Почему?
  dynamic dyn;
  dyn = 5;
  dyn = text; // ошибки нет, dynamic позволяет изменять тип переменной

  // Вывод
  print("Глобальная переменная a: $a");
  print("Локальная переменная b: $b");
  print("Переменная text: $text");
  print("Переменная dyn: $dyn");

  //Задание 2:
  //Создать переменную с именем fin  при помощи final и con при помощи const,
  // попытаться изменить переменные, посмотреть результат.
  final fin = 7;
  //fin=6;// ошибка, переменную можно инициализировать только один раз.
  // Запрещается повторное присваивание после инициализации
  const con = 11;
  //con=9;// ошибка, значение уже установлено заранее.
  // Переменная полностью неизменяемая, значение должно быть константой на этапе компиляции.

  //Задание 3:
  //Присвоить a значение проверить является ли число четным.
  int x = 13; //дала переменной имя x, а не а, так как а уже есть
  if (x % 2 != 0) {
    print("Число нечетное!");
  } else {
    print("Число четное!");
  }
  //Задание 4:
  // Используете 32-битный символ Unicode u2665 выведите сообщение  в консоль: I ♥ dart
  print("I \u2665 dart"); // для коротких \uXXXX, для длинных u{XXXXX}

  //Задание 5:
  // Создать список list из первых 8 чисел.
  // Вывести длину этого списка.
  // Вывести отсортированный список list в порядке убывания, используя sort.
  // Выделить подсписок newList  длиной в 3 элемента.
  // Вывести индекс элемента со значением “5” в списке list.
  // Удалить значения с 5 до 8 из списка list при помощи removeWhere и вывести в консоль.
  // Заменить значения [1,2,3] в списке list на [10, 20, 30] и вывести в консоль итоговый список.
  List<int> list = [1, 2, 3, 4, 5, 6, 7, 8];
  print("Длина списка: ${list.length}");
  list.sort((a, b) => b.compareTo(
      a)); //sort() сортирует элементы по возрастанию. compareTo() используется для сравнения двух значений
  print("Отсортированный по убыванию список $list");
  List<int> newList = list.sublist(0, 3);
  print("Новый подсписок из 3 элементов: $newList");
  int index = list.indexOf(
      5); //.lastIndexOf(5) если в списке есть два элемента со значением 5 и нужен индекс последнего элемента с таким значение
  print("Индекс элемента со значением 5: $index");
  list.removeWhere((tmp) => tmp >= 5 && tmp <= 8);
  print("Список с удаленными значениями [5,8]: $list");
  list.sort();
  list.replaceRange(0, 3, [10, 20, 30]);
  print(
      "Истоговый список после замены значений [1,2,3] в списке list на [10, 20, 30]: $list");

  // Задание 6:
  // Создать Map телефонных номеров с именем numberBook  и типом данных (“имя”: “номер телефона”), заполнить данными: Иван : 2264865, Татьяна: 89523366684, Олег: 84952256575.
  // Вывести на экран весь телефонный справочник numberBook.
  // Вставить новый номер в карту: Екатерина:2359942
  // Отсортировать карту в обратном порядке по ключам и вывести на экран результат.
  Map<String, String> numberBook = {
    "Иван": "2264865",
    "Татьяна": "89523366684",
    "Олег": "84952256575"
  };
  print("Телефонный справочник: $numberBook");
  numberBook["Екатерина"] = "2359942";
  var sortedNumberBook = Map.fromEntries(numberBook.entries
      .toList() //итеративно проходимся по парам и делаем их них список
    ..sort((a, b) => b.key //сортируем по возрастанию
        .compareTo(a.key))); // сортируем в обратном порядке по ключам (именам)
  print("Отсортированный справочник: $sortedNumberBook");

  // Задание 7:
  // Создать Set строк с именем mySet и данными {‘Москва’, ‘Вашингтон’, ‘Париж’}
  // Добавить в mySet  еще одно значение ‘Вашингтон’. Вывести длину списка(комментарием написать почему длина именно такая)
  Set<String> city = {
    'Москва',
    'Вашингтон',
    'Париж'
  }; // set - коллекция уникальных элементов (без повторений)
  city.add("Вашингтон");
  print(city); //вывод на печать, чтобы убедиться, что Вашингтон не добавлен
  print(
      "Длина списка городов: ${city.length}"); // выведет 3, так как в список не был добавлен еще один "Вашингтон", так как он уже был в спике
  // Вывести на экран количество уникальных слов в тексте c учетом регистра(She == she)
  // “She sells sea shells on the sea shore
  // The shells that she sells are sea shells I am sure.
  // So if she sells sea shells on the sea shore
  // I am sure that the shells are sea shore shells”
  String myText = """She sells sea shells on the sea shore
  The shells that she sells are sea shells I am sure.
  So if she sells sea shells on the sea shore
  I am sure that the shells are sea shore shells""";
  // Разбиваем текст на слова, удаляя знаки препинания
  //\W+ - любой не буквенный символ
  //RegExp  регулярное выражение
  //w.isNotEmpty) убирает пустые элементы.
  List<String> words =
  myText.split(RegExp(r'\W+')).where((w) => w.isNotEmpty).toList();
  Set<String> uniqueWords =
  words.toSet(); // Set<String>,  удаляет дубликаты, но сохраняет регистр
  print(
      "Количество уникальных слов в тексте: ${uniqueWords.length}"); //Вывод кол-ва уникальных слов
}

